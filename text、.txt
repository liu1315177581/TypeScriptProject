http://www.cnblogs.com/tansm/p/TypeScript_Handbook_Classes.html


1，基础类型
	布尔值
		let isDone:boolean = false;

	数字
		let decLiteral:number = 6;
		let hexLiteral:number = 0xf00d;

	字符串
		let name:string = 'bob';

	数组
		let list:number[] = [1,2,3];
		let list:Array<number> = [1,2,3]

	元祖Tuple
		元祖类型允许表达固定数量的已知类型集合，但这些类型不必是相同的。例如，想表示一个“number”，“string”组合的类型
		例子：
			声明一个元祖类型：	var x:[string,number];
			初始化他		x = ['hello',10];
		可以使用数字检索一个已知的元素，
			x[0].substr(1);

	Enum枚举
		enum Color{Red，Green,Blue}
		var c:Color = Color.Green;

		enum Color{Red = 1,Green,Blue}
		var c:Color = Color.Green;

		enum Color{Red = 1,Green = 2,Blue = 4};
		var c:Color = Color.Green;

		enum Color{Red=1,Green,Blue};
		var colorName:string = Color[2];

	Any(描述一些类型不明确的变量)
		我们需要略过对这些变量进行的类型检查，让他们直接通过编译时的检查。
		var notSure:any = 4;
		notSure = ‘aaa’;
		notSure = false

	Void(没有返回值的函数)
		function aa():void{
			console.log('aa');
		}
		var a:void = undefined;  //变量为void类型时，只能赋值为undefined或null

		
	
2，接口：	
		function aaa(labelledObj:{label:string}){	
		//aaa有一个参数，并要求这个对象参数有一个名为label类型的string属性，
		  我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。

		}
		var Obj = { size:10, label:'Size 10 object' };
		aaa(Obj)

		///////////////////////////
		interface LabelleValue{		//使用接口描述，必需包含一个label属性为类型为string
			label:string
		}
		function printLabel(labelledObj:LabelleValue){

		}
		var myObj = {size:10, label:'aaa'};
		printLabel(myObj);

	可选属性
		接口里的属性不全都是必需的。有些只是在某些条件下存在，或者根本不存在。可选属性在应用“option bags”模式时很常用，
		即给函数传入的参数对象中只有部分属性赋值了。
		
		带有可选属性的接口与普通接口定义差不多，只是在可选属性名字定义的后面加一个？符号。
		好处：	1，可以对可能存在的属性进行预定义
			2，可以捕获引用了不存在属性是的错误
		
		例子：
			interface SquareConfig{
				color?:string;
				width?:number;
			}
			function createSquare(config:SquareConfig):{color:string; area:number}{
				var newSquare = { color:'white',area:100 };
				if{config.color}{
					newSquare.color = config.color;
				}
				if(config.width){
					newSquare.area = config.width*config.width;
				}
				return newSquare;
			}
			var mySquare = createSquare({color:'black'});


	2.1，函数类型
		接口能够描述javascript中对象拥有的各种各样的外形。
		除了描述带有属性的普通对象外，接口也可以描述函数类型。
	
	


	2.2，数组类型
		数组类型具有一个index类型表示索引的类型，还有一个相应的返回值类型表示通过索引得到的元素的类型；
	
		interface StringArray{
			[index:number]:string;
		}
		var myArray:StringArray;
		mtArray = ['Bob','Fred']

	2.3，类类型
	

3，类
	传统javascript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来说有些棘手，
	因为他们用的是基于类的继承并且对象是从类构建出来的。
	
	例子：
		class Greer{		//声明一个Greer类，拥有3个成员
			greeting:string;		//带有greeting属性	
			constructor(message:string){	//一个构造函数
				this.greeting = message;
			}
			greet(){			//一个greet方法
				return 'Hello,'+this.greeting
			}
		}
		var greeter = new Greer('world');	//new构造一个函数，他会调用之前定义的构造函数，创建一个Greer类型的新对象，并执行构造函数初始化它。

	继承：
		在Typescript里，我们可以使用常用的面向对象模式。基于类的程序设计中最基本的模式是允许使用继承来扩展一个类。
		
		例子：	class Animl{
				name:string;
				constructor(theName:string){
					this.name = theName;
				}
				move(disatanceInMeters:number = 0){
					console.log(`${this,name}moved${distanceInMeters}`);
				}
			}
			
			class Snake extends Animal{		
				constructor(name:string){
					super(name)
				}
				move(distanceInMeters = 5){
					console.log();
					super.move(distanceInMeters);
				}
			}
		
			这个例子使用extends来创建子类。并且可以访问其属性和方法。
			包含constructor函数的派生类必须调用super()，它会执行基类的构造方法

	公共，私有与受保护的修饰符
		默认为公有：
			在TypeScript里，每个成员默认为public的。
		        class Animal{
				public name:string;
				public constructor(){}
				public move(){}
			}
			
		私有属性private
			class Animal{
				private name:string;
				constructor(theName:string){
					this.name = theName;
				}
			}
			new Animal("Cat").name //报错访问不到

	存取器
		TypeScript支持getters/setter来截取对对象成员的访问。
		例子1：
			这里我们使用平常的方法设置或者获取，但可能会有问题
			class Employee{
				fullName:string;
			}
			var employee = new Employee();
			employee.fullName = '你好';
			if(employee.fullName){
				console.log(employee.fullName);
			}
		
		例子2： 
			var passcode = 'passcode';
			class Employee{
				private _fullName:string;
				
				get fullName():string{
					return this._fullName;
				}
				set fullName(newName:string){
					if(passcode && passcode == 'secret passcode'){
						this._fullName = newName
					}else{
						console.log('error');
					}
				}
			}
			var employee = new Empoyee();
			employee.fullName = 'Bob Smith';
			if(employee.fullName){
				alert(employee.fullName);
			}
			

		
	静态属性
		动态属性(类的实例成员，仅当类被实例化的时候才会被初始化的属性)
		静态属性(存在于类本身而不是类的实例上)static
			
		例子：	
			class Grid{
				static origin = {x: 0, y:0}
				a(x:number;y:number){
					var xDist = (point.x - Grid.origin.x);
					var yDist = (point.x - Grid.origin.y);
					return Math.sqrt(xDist * xDist + yDist * yDist)/this.scale;
				}
				constructor(public scale:number){
					
				}
			}
			var grid1 = new Grid(1.0);
			var grid2 = new Grid(5.0);
		
			console.log(grid1.a({x:10,y:10}));
		
	抽象类
		抽象类是供其它类继承的基类。他们一般不会被直接实例化。不同于接口，抽象类可以包含成员的实现细节。
		abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法
		
		例子：
			abstract class Animal{
				abstract makeSound():void;
				move():void{
					console.log('a');
				}
			}

		抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法与接口方法相似。两者都是定义方法签名不包含方法体。
		然而抽象方法必须使用sbstract关键字并且可以包含访问符。
		abstract class Department{
			constructor(public name:string){
				
			}
			printName():void{
				
			}
		}
	
	高级技巧
		构造函数
			当定义TypeScript类的时候，实际上同时定义了很多东西。首先是类的实例的类型。
			class Greeter{
				greeting:string;
				constructor(message:string){
					this.greeting = message
				}
				greet(){
					return 'Hello,'+this.greeting;
				}
			}
			var greeter:Greeter;
			greeter = new Greeter('world');
			
		

























